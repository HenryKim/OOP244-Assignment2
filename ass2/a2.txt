Script started on Fri 28 Jun 2013 11:17:11 PM EDT
hkim142@matrix:~/oop244/ass2> whoamui[K[Ki
hkim142
hkim142@matrix:~/oop244/ass2> cat ISBN.h ISBNPrefix.h ISBN.cpp ISBNPfr[K[Krefix.cpp
/*Hyungi kim
025 741 125
assignment 2
ISBN.h*/
#include <iostream>
#include <cstring>
using namespace std;
int isValid(const char* str);
class ISBN{
	char ISBNcd[11];
	char area[6];
	char publisher[8];
	char title[7];
	bool registered;
	bool isregistered(const ISBNPrefix& list);
public:
	ISBN();
	ISBN(const char* str, const ISBNPrefix& list);
	 bool isRegistered() const;
	 bool isRegistered(const ISBNPrefix& list);
	 bool empty() const;
	 void toStr(char* str) const;
	 void toStrWithStyle(char* str) const;
	 bool read(istream& is, const ISBNPrefix& list);
	 void display(ostream& os) const;
};

/*Hyungi kim
025 741 125
assignment 2
ISBNPrefix.h*/
class ISBNPrefix{
FILE *fp;
public:
ISBNPrefix();
ISBNPrefix(const char* filename);
bool isRegistered(int area) const;
int minNoDigits(int area) const;
bool isRegistered(int area, const char* publisher) const;
 ~ISBNPrefix();
};/*Hyungi kim
025 741 125
assignment 2
ISBN.cpp*/
#include<iostream>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <fstream>
#include <cstdlib>
using namespace std;
#include"ISBNPrefix.h"
#include"ISBN.h"


int isValid(const char str[])
{
   int i, a=0, b=10, rc, sum=0;
 
   if( str != NULL )
   {
      if( strlen( str ) != 10 )
         return false;
      else
         if( str[9] == 'X' || ( str[9] >= '0' && str[9] <= '9' ) )//checking the digits are correct
         {
            for( i = 0; i < 9; i++ )
            {
               if( str[i] < '0' && str[i] > '9' )
                  return false;/// is numer in correct digits
            }
         }
 
      if( str[9] == 'X' )
         rc = 10;//if check digits are X than value is 10
      else
         rc = str[9] - '0';//if not the value is value
 
     for(a=0;a<9;a++,b--)
      {
         sum += ( str[a] - '0' ) * b; // make ur sum           
      }
 
      sum += rc;//check digit + sum
 
      if( sum % 11 == 0 ){
         return true;
	  }
      else{
         return false;
	  }
   }
 
   return false;
}
ISBN::ISBN(){
	int t = 0, a = 0, p = 0,i=0;
	for(i=0;i<11;i++){
		ISBNcd[i]='\0';
	}//safe empty satate
	for(t=0;t<7;t++){
      title[t] = '\0';
   }//safe empty satate
 
	 for( a=0;a<6;a++ ){
      area[a] = '\0';
   }//safe empty satate
 
   for(p=0;p<8;p++ ){
      publisher[p] = '\0';
   }////safe empty satate
   registered=false;//safe declarition of null values and false
}//ISBN Constructior ends
bool ISBN::empty() const{
	ISBNcd[0] == '\0';
	bool registered=false;
	return !ISBNcd[0];//return str[0];
}//ISBN::empty ends
 bool ISBN::isRegistered(const ISBNPrefix& list)
{
   int t = 0, a = 0, p = 0;
 
  for(t=0;t<7;t++){
      title[t] = '\0';
   }
 
   for(a=0;a<6;a++){
      area[a] = '\0';
   }
 
 for(p=0;p<8;p++){
      publisher[p] = '\0';
   }//setting all values in to null
 
   for( a=0; a<5; a++ ){
      area[a] = ISBNcd[a];//area=ISBNcd;
      for( p=1; p<8; p++ ){
         publisher[p - 1] = ISBNcd[a + p];
         if( list.isRegistered(atoi( area ), publisher ) ) {
            for( t=1; t<7; t++ ){
               if(a+p+t == 9 ){
                  t = 7;//is digit count goes max(9)
			   }
               else{
                  title[t - 1] = ISBNcd[t + a + p];
			   }
            }
            return true;
         }
      }
      for(p=0;p<8;p++){
         publisher[p] = '\0';//or reset publisher array
      }
   }
return false;
 
}//ISBN::isRegistered const ISBNPrefix & ends
ISBN::ISBN(const char* s2, const ISBNPrefix& list){
	if(isValid(s2)==true){//is valid str?
		strcpy(ISBNcd,s2);
		if(isRegistered(list))
		{
			registered=true;
		}
		else{
			registered=false;
		}
	}//if isVlaid=true
	else{
		*this =ISBN();}
}//ISBN::ISBN(const char*,const ISBNprefix&) ends
 bool ISBN::isRegistered() const{
	 return registered;
 }//end of ISBN::isRegistered()


 void ISBN::toStr(char* str) const{
	 strcpy(str,ISBNcd);//copys ISBN cd to str and return
 }//tostr ends

 void ISBN::toStrWithStyle(char* str) const{
	 if(isValid(str)==true){
		strcpy(str, area);
        strcat(str, "-");
        strcat(str, publisher);
        strcat(str, "-");
        strcat(str, title);
        strcat(str, "-");
        strcat(str, &ISBNcd[9]);//area-publiser-titler to str and return
	 }
	 else{
		 toStr(str);//if not valid than changes to no style mod
	 }
 }//tostrwithstyle ends

 bool ISBN::read(istream& is, const ISBNPrefix& list){
	 char temp[11];
	 int i=0;
	 while (i==0){
		 cout<<"ISBN 0 to quit :"<<endl;
		 is.getline(temp,11);
		 if(strcmp(temp,"0")==0)
			{
			return false;
			}
		 if(strlen(temp)>10){
			 return false;
		 }
		 else if(strlen(temp) ==10 && isValid(temp) == true){
			 i++;
			 *this=ISBN(temp, list);
		 }
		 else{
			 cout<<"Invalid check digit. Please try again"<<endl;
		 }	 
	 }
	 return true;
 }//read ends

 void ISBN::display(ostream& os) const{
	 char temp[13];
	 if(registered==true){
		 toStrWithStyle(temp);
	 }
	 else{
		 toStr(temp);
	 }
	 os.width(13);
	 os<<temp<<endl;
 }//display ends/*Hyungi kim
025 741 125
assignment 2
ISBN.cpp*/
#include<iostream>
#include <cstdio>
#include <cstring>
#include <stdio.h>
#include <fstream>

using namespace std;
#include"ISBNPrefix.h"

ISBNPrefix::ISBNPrefix(){
	fp=NULL;
}
ISBNPrefix::ISBNPrefix(const char* filename){
	if(filename !=NULL){
	fp = fopen ("prefixRanges.txt","r");
	}
	else{
		fp=NULL;
	}
}
bool ISBNPrefix::isRegistered(int area) const{
	int a,ps,pl;
    if(fp!=NULL){
		rewind(fp);
		do{
        fscanf(fp,"%d%d%d",&a,&ps,&pl);
        if (a == area){
			return true;
		}
		}while(a!=area && !feof(fp));
	}
    return false;
}
int ISBNPrefix::minNoDigits(int area) const{
	int minno = 0, a;
        char pmin[8], pmax[8];
        int i = 0;
 
        if (area < 0)
                return 0;
 
        rewind(fp);
        while (!feof(fp))
        {
                fscanf(fp, "%d %s %s", &a, &pmin, &pmax);
                if (area == a)
                {
                        minno = strlen(pmin);
                        break;
                }
        }
        return minno;
}
bool ISBNPrefix::isRegistered(int area, const char* publisher) const{
	int a,minck=0;
    char pu[10],pl[10];
    if(fp !=NULL){
		rewind(fp);		
		do{
        fscanf(fp,"%d%s%s",&a,pu,pl);
        if(a == area){
            if(strlen(publisher)==strlen(pu)){
				if((strcmp(publisher,pu) >=0) && (strcmp(publisher,pl)<=0)){
					return true;
				}
			}
		}//a==area;
	}while (minck==0 && !feof(fp));
	}// if !=NULL
    return false;
}
ISBNPrefix::~ISBNPrefix(){
	if( fp !=NULL){
		fclose(fp);
	}
}hkim142@matrix:~/oop244/ass2> cat ISBN.h ISBNPrefix.h ISBN.cpp ISBNPrefix.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cwhoami[Ka.out[Kg++ ISBN.cpp ISBNPrefix.cpp a2test.cpp
hkim142@matrix:~/oop244/ass2> g++ ISBN.cpp ISBNPrefix.cpp a2test.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccat ISBN.h ISBNPrefix.h ISBN.cpp ISBNPrefix.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cwhoami[Ka.out[K
Prefix Tests
============
totalPassed test    1 (isRegistered(-1))
totalPassed test    2 (isRegistered(99955))
totalPassed test    3 (isRegistered(0))
totalPassed test    4 (isRegistered(-1, 0))
totalPassed test    5 (isRegistered(99955, 0))
totalPassed test    6 (isRegistered(0, 10))
totalPassed test    7 (isRegistered(99955, 0))
totalPassed test    8 (isRegistered(0, 95000000))
totalPassed test    9 (minNoDigits(-1))
totalPassed test   10 (minNoDigits(0))
totalPassed test   11 (minNoDigits(92))
totalPassed test   12 (minNoDigits(99955))

Prefix Tests totalPassed!

ISBN Tests
==========
totalPassed test   13 (ISBN() and empty())
totalPassed test   14 (ISBN() and isRegistered())
totalPassed test   15 (ISBN("9070002043", ) and empty())
totalPassed test   16 (ISBN("9070002043", ) and isRegistered())
totalPassed test   17 (ISBN(9070002046) and empty())
totalPassed test   18 (ISBN("9070002046", ) and isRegistered())
totalPassed test   19 (toStr on ISBN() and IBSN("9070002046", ))
totalPassed test   20 (ISBN(9070002043) and toStr(char*))
totalPassed test   21 (ISBN(...) and toStr(char*))
totalPassed test   22 (ISBN(9070002043) and toStr(char*))
totalPassed test   23 (ISBN(9070002043) and toStrWithStyle(char*))
totalPassed test   24 (ISBN(9995500000) and toStrWithStyle(char*))

ISBN Tests totalPassed!

ISBN/Prefix Tests
=================
totalPassed test   25 (isRegistered() returned true for 9070002043)
totalPassed test   26 (isRegistered() returned true for 9995500000)
totalPassed test   27 (isbn.isRegistered() returned true  for 0000000000)
totalPassed test  127 (isbn.isRegistered() returned true  for 8070000007)
totalPassed test  227 (isbn.isRegistered() returned true  for 9020000004)
totalPassed test  327 (isbn.isRegistered() returned true  for 9559500007)
totalPassed test  427 (isbn.isRegistered() returned true  for 9679989003)
totalPassed test  527 (isbn.isRegistered() returned true  for 9781990007)
totalPassed test  627 (isbn.isRegistered() returned true  for 9946000008)
totalPassed test  727 (isbn.isRegistered() returned true  for 9961700007)
totalPassed test  827 (isbn.isRegistered() returned true  for 9976999909)
totalPassed test  927 (isbn.isRegistered() returned true  for 9990389004)
totalPassed test 1027 (isbn.isRegistered() returned true  for 9992200006)
totalPassed test 1127 (isbn.isRegistered() returned true  for 9993990000)
totalPassed test 1149 (       isValid(...) returned false for XXXXXXXXX0)
totalPassed test 1152 (       isValid(...) returned false for 081613752X)

ISBN/Prefix Tests totalPassed!


Your Bookstore modules have totalPassed 1152 of 1152 tests

Congratulations!!!   Your Bookstore modules are ready for submission

hkim142@matrix:~/oop244/ass2> exit
exit

Script done on Fri 28 Jun 2013 11:17:54 PM EDT
